// <auto-generated />
using System;
using HealthInsuranceWebServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthInsuranceWebServer.Migrations
{
    [DbContext(typeof(HealthInsuranceWebServerContext))]
    partial class HealthInsuranceWebServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HealthInsuranceWebServer.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "Random City",
                            Country = "Random Country",
                            District = "Random District",
                            PostalCode = "70000",
                            Street = "Random Street"
                        });
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.Admin", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Username");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AddressId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId1")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("EmployeeId1");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("HospitalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PolicyId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HospitalId");

                    b.HasIndex("AddressId");

                    b.HasIndex("PolicyId");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.InsuranceCompany", b =>
                {
                    b.Property<int>("InsCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsCompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsCompanyId");

                    b.HasIndex("AddressId");

                    b.ToTable("InsuranceCompany");

                    b.HasData(
                        new
                        {
                            InsCompanyId = 1,
                            AddressId = 1,
                            InsCompanyName = "UnitedHealth Group Incorporated",
                            Phone = "1234-5678-1011"
                        },
                        new
                        {
                            InsCompanyId = 2,
                            AddressId = 1,
                            InsCompanyName = "AXA S.A.",
                            Phone = "1234-5678-1011"
                        },
                        new
                        {
                            InsCompanyId = 3,
                            AddressId = 1,
                            InsCompanyName = "China Life Insurance (Group) Company",
                            Phone = "1234-5678-1011"
                        },
                        new
                        {
                            InsCompanyId = 4,
                            AddressId = 1,
                            InsCompanyName = "Ping An Insurance (Group) Company of China Ltd",
                            Phone = "1234-5678-1011"
                        },
                        new
                        {
                            InsCompanyId = 5,
                            AddressId = 1,
                            InsCompanyName = "Allianz SE",
                            Phone = "1234-5678-1011"
                        },
                        new
                        {
                            InsCompanyId = 6,
                            AddressId = 1,
                            InsCompanyName = "Anthem, Inc.",
                            Phone = "1234-5678-1011"
                        },
                        new
                        {
                            InsCompanyId = 7,
                            AddressId = 1,
                            InsCompanyName = "Kaiser Foundation Group of Health Plans",
                            Phone = "1234-5678-1011"
                        },
                        new
                        {
                            InsCompanyId = 8,
                            AddressId = 1,
                            InsCompanyName = "Assicurazioni Generali S.p.A",
                            Phone = "1234-5678-1011"
                        },
                        new
                        {
                            InsCompanyId = 9,
                            AddressId = 1,
                            InsCompanyName = "State Farm Group",
                            Phone = "1234-5678-1011"
                        },
                        new
                        {
                            InsCompanyId = 10,
                            AddressId = 1,
                            InsCompanyName = "People’s Insurance Company (Group) of China Ltd",
                            Phone = "1234-5678-1011"
                        });
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.Policy", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Benefit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Emi")
                        .HasColumnType("real");

                    b.Property<int>("InsCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceCompanyInsCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("PolicyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<bool>("Retired")
                        .HasColumnType("bit");

                    b.HasKey("PolicyId");

                    b.HasIndex("InsuranceCompanyInsCompanyId");

                    b.ToTable("Policy");

                    b.HasData(
                        new
                        {
                            PolicyId = 1,
                            Amount = 3000f,
                            Benefit = "Random Benefit",
                            Description = "Random Description",
                            Emi = 250f,
                            InsCompanyId = 1,
                            PolicyName = "Random Name",
                            PolicyNumber = "21-00001",
                            Retired = false
                        },
                        new
                        {
                            PolicyId = 2,
                            Amount = 2467f,
                            Benefit = "Random Benefit",
                            Description = "Random Description",
                            Emi = 123f,
                            InsCompanyId = 1,
                            PolicyName = "Random Name",
                            PolicyNumber = "21-00002",
                            Retired = false
                        },
                        new
                        {
                            PolicyId = 3,
                            Amount = 9876f,
                            Benefit = "Random Benefit",
                            Description = "Random Description",
                            Emi = 222f,
                            InsCompanyId = 1,
                            PolicyName = "Random Name",
                            PolicyNumber = "21-00003",
                            Retired = false
                        },
                        new
                        {
                            PolicyId = 4,
                            Amount = 2345f,
                            Benefit = "Random Benefit",
                            Description = "Random Description",
                            Emi = 785f,
                            InsCompanyId = 1,
                            PolicyName = "Random Name",
                            PolicyNumber = "21-00004",
                            Retired = false
                        },
                        new
                        {
                            PolicyId = 5,
                            Amount = 9876f,
                            Benefit = "Random Benefit",
                            Description = "Random Description",
                            Emi = 234f,
                            InsCompanyId = 1,
                            PolicyName = "Random Name",
                            PolicyNumber = "21-00005",
                            Retired = false
                        },
                        new
                        {
                            PolicyId = 6,
                            Amount = 12345f,
                            Benefit = "Random Benefit",
                            Description = "Random Description",
                            Emi = 111f,
                            InsCompanyId = 1,
                            PolicyName = "Random Name",
                            PolicyNumber = "21-00006",
                            Retired = false
                        },
                        new
                        {
                            PolicyId = 7,
                            Amount = 123f,
                            Benefit = "Random Benefit",
                            Description = "Random Description",
                            Emi = 222f,
                            InsCompanyId = 1,
                            PolicyName = "Random Name",
                            PolicyNumber = "21-00007",
                            Retired = false
                        },
                        new
                        {
                            PolicyId = 8,
                            Amount = 987654f,
                            Benefit = "Random Benefit",
                            Description = "Random Description",
                            Emi = 250f,
                            InsCompanyId = 1,
                            PolicyName = "Random Name",
                            PolicyNumber = "21-00008",
                            Retired = false
                        },
                        new
                        {
                            PolicyId = 9,
                            Amount = 347f,
                            Benefit = "Random Benefit",
                            Description = "Random Description",
                            Emi = 96f,
                            InsCompanyId = 1,
                            PolicyName = "Random Name",
                            PolicyNumber = "21-00009",
                            Retired = false
                        },
                        new
                        {
                            PolicyId = 10,
                            Amount = 1000f,
                            Benefit = "Random Benefit",
                            Description = "Random Description",
                            Emi = 250f,
                            InsCompanyId = 1,
                            PolicyName = "Random Name",
                            PolicyNumber = "21-00010",
                            Retired = false
                        });
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.PolicyApproval", b =>
                {
                    b.Property<int>("ApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PolicyRequestRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ApprovalId");

                    b.HasIndex("PolicyRequestRequestId");

                    b.ToTable("PolicyApproval");
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.PolicyEmployee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Emi")
                        .HasColumnType("real");

                    b.Property<int?>("EmployeeId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicyEmployee");
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.PolicyRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<float>("Emi")
                        .HasColumnType("real");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId1")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("RequestId");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicyRequest");
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.Employee", b =>
                {
                    b.HasOne("HealthInsuranceWebServer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.Feedback", b =>
                {
                    b.HasOne("HealthInsuranceWebServer.Models.Employee", "Employee")
                        .WithMany("Feedbacks")
                        .HasForeignKey("EmployeeId1");
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.Hospital", b =>
                {
                    b.HasOne("HealthInsuranceWebServer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthInsuranceWebServer.Models.Policy", null)
                        .WithMany("Hospitals")
                        .HasForeignKey("PolicyId");
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.InsuranceCompany", b =>
                {
                    b.HasOne("HealthInsuranceWebServer.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.Policy", b =>
                {
                    b.HasOne("HealthInsuranceWebServer.Models.InsuranceCompany", "InsuranceCompany")
                        .WithMany("Policies")
                        .HasForeignKey("InsuranceCompanyInsCompanyId");
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.PolicyApproval", b =>
                {
                    b.HasOne("HealthInsuranceWebServer.Models.PolicyRequest", "PolicyRequest")
                        .WithMany()
                        .HasForeignKey("PolicyRequestRequestId");
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.PolicyEmployee", b =>
                {
                    b.HasOne("HealthInsuranceWebServer.Models.Employee", "Employee")
                        .WithMany("PolicyEmployees")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("HealthInsuranceWebServer.Models.Policy", "Policy")
                        .WithMany("PolicyEmployees")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthInsuranceWebServer.Models.PolicyRequest", b =>
                {
                    b.HasOne("HealthInsuranceWebServer.Models.Employee", "Employee")
                        .WithMany("PolicyRequests")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("HealthInsuranceWebServer.Models.Policy", "Policy")
                        .WithMany("PolicyRequests")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
